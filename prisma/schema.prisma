// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  engineType = "binary"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  USER
  STAFF
  COORD
  CONCELHO
  ADMIN
}

enum EstadoCivil {
  SOLTEIRO
  CASADO
  DIVORCIADO
  VIUVO
  UNIAO_ESTAVEL
}

enum TamanhoCamiseta {
  PP
  P
  M
  G
  GG
  XGG
}

model User {
  id        String             @id @default(cuid())
  email     String             @unique
  password  String
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  role      Role               @default(USER)
  
  // Dados Pessoais
  nomeCompleto        String?
  cpf                 String?           @unique
  dataNascimento      DateTime?
  estadoCivil         EstadoCivil?
  tamanhoCamiseta     TamanhoCamiseta?
  profissao           String?
  telefone            String?
  contatoEmergencia   String?
  telefoneEmergencia  String?
  cidade              String?
  
  // Ficha de Saúde
  portadorDoenca      String?
  alergiaIntolerancia String?
  medicacaoUso        String?
  restricaoAlimentar  String?
  operadora           String?
  numeroPlano         String?
  
  // Termos e Condições
  termo1              Boolean           @default(false)
  termo2              Boolean           @default(false)
  termo3              Boolean           @default(false)
  
  // Relações
  Sessions  Sessions[]
  Inscricoes InscricaoEvento[]
  
  @@map("users")
}

model Sessions {
  id        String   @id @default(cuid())
  userId    String
  token     String
  expiresAt DateTime
  valid     Boolean  @default(true)
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// --- Eventos básicos para listagem/CRUD ---
enum EventStatus {
  ativo
  cancelado
  finalizado
  lotado
}

model Event {
  id                String      @id @default(cuid())
  title             String
  short_description String?
  description       String?
  category          String?
  location          String?
  organizer_name    String?
  organizer_contact String?
  image_url         String?
  price             Float       @default(0)
  status            EventStatus @default(ativo)
  event_date_start  DateTime?
  event_date_end    DateTime?
  event_time_start  String?
  event_time_end    String?
  target_audience   String?
  max_participants  Int?
  payment_info      String?
  required_items    String[]
  instructions      String?
  cancellation_policy String?
  transportation    String?
  meals_included    Boolean?    @default(false)
  accommodation_included Boolean? @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relações
  inscricoes        InscricaoEvento[]

  @@map("events")
}

// --- Inscrições em Eventos ---
enum InscricaoStatus {
  pendente
  confirmada
  cancelada
  rejeitada
}

model InscricaoEvento {
  id                String         @id @default(cuid())
  userId            String
  eventId           String
  status            InscricaoStatus @default(pendente)
  dataInscricao     DateTime       @default(now())
  dataConfirmacao   DateTime?
  observacoes       String?
  comprovantePagamento String?
  valorPago         Float?
  formaPagamento    String?
  
  // Arquivos enviados
  arquivoUrl        String?        // URL do arquivo no Supabase Storage
  nomeArquivo       String?        // Nome original do arquivo
  tipoArquivo       String?        // Tipo do arquivo (image/jpeg, application/pdf, etc.)
  tamanhoArquivo    Int?           // Tamanho do arquivo em bytes
  
  // Dados específicos do evento (podem variar conforme o tipo)
  dadosAdicionais   Json?
  
  // Relações
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  event             Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  @@unique([userId, eventId])
  @@map("inscricoes_eventos")
}